?graphon
library(graphon)
library(graphon)
?est.USVT
library(graphon)
?graphon
library(graphon)
?graphon
library(graphon)
?graphon
library(graphon)
library(graphon)
?graphon
library(graphon)
library(graphon)
?quantile
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(devtools)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
matrix(0,c(3,3))
array(0,c(3,3))
A = matrix(rnorm(9),nr=3)
A_sq = (A%*%A)/3
A_sq[3,]
aux_nbdsmooth <- function(A,N){
# definitions
D = array(0,c(N,N))
A_sq = (A%*%A)/N
# compute D : dissimilarity
for (i in 1:N){
for (j in (i+1):N){
val = max(abs(A_sq[i,]-A_sq[j,]))
D[i,j] = val
D[j,i] = val
}
}
# return result
return(D)
}
aux_nbdsmooth(A)
aux_nbdsmooth(A,3)
aux_nbdsmooth <- function(A,N){
# definitions
D = array(0,c(N,N))
A_sq = (A%*%A)/N
# compute D : dissimilarity
for (i in 1:(N-1)){
for (j in (i+1):N){
val = max(abs(A_sq[i,]-A_sq[j,]))
D[i,j] = val
D[j,i] = val
}
}
# return result
return(D)
}
aux_nbdsmooth(A,3)
maxab = max(1,2)
maxab
pow(3,2)
3**2
3**3
3**2.4
# gmodel.preset : fast generation -----------------------------------------
aux_preset <- function(vecgrid,n,id){
# preparation
W = array(0,c(n,n))
# iteration
for (i in 1:n){
u = vecgrid[i]
for (j in 1:n){
v = vecgrid[j]
if (id==1){
W[i,j] = u*v;
} else if (id==2){
W[i,j] = exp(-((u**0.7)+(v**0.7)));
} else if (id==3){
W[i,j] = ((u**2)+(v**2)+sqrt(u)+sqrt(v))/4;
} else if (id==4){
W[i,j] = (u+v)/2;
} else if (id==5){
W[i,j] = 1/(1+exp(-10*((u**2)+(v**2))));
} else if (id==6){
W[i,j] = abs(u-v)
} else {
maxuv = max(u,v)
minuv = min(u,v)
if (id==7){
W[i,j] = 1/(1+exp(-((maxuv**2)+(minuv**4))));
} else if (id==8){
W[i,j] = exp(-(maxuv**0.75));
} else if (id==9){
W[i,j] = exp(-0.5*(minuv+sqrt(u)+sqrt(v)));
} else if (id==10){
W[i,j] = log(1+0.5*maxuv);
}
}
}
}
# return W
return(W)
}
vecgrid = seq(0,1,length.out=3)
n = 3
for (i in 1:10){A=aux_preset(vecgrid,n,id)}
for (i in 1:10){A=aux_preset(vecgrid,n,i)}
A
library(graphon)
library(graphon)
## generate a graphon of type No.4 with 3 clusters
W = gmodel.preset(3,id=4)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 5 observations from a given probability matrix
A = gmodel.P(P,rep=5,symmetric.out=TRUE)
## run nbdsmooth algorithm
res2 = est.nbdsmooth(A)
## compare true probability matrix and estimated ones
par(mfrow=c(1,2))
image(P); title("original P")
image(res2$P); title("nbdsmooth estimated P")
library(graphon)
library(graphon)
r3 = sample(1:10,3)
r3
?sample
r3 = sample(1:10,111)
r3 = sample(1:10,9)
r3
?gmodel.P
require(graphons)
require(graphon)
?gmodel.P
library(graphon)
?gmodel.P
n  = 100
r3 = sample(1:10,3)
W1 = gmodel.preset(n,id=r3[1])
W2 = gmodel.preset(n,id=r3[2])
W3 = gmodel.preset(n,id=r3[3])
## Generate corresponding observations
A1 = gmodel.P(W1)
r3
r3[1]
r3[2]
r3[3]
n  = 100
r3 = sample(1:10,3)
W1 = gmodel.preset(n,id=r3[1])
r3 = as.integer(sample(1:10,3))
W1 = gmodel.preset(n,id=r3[1])
r3[1]
r3[2]
r3[3]
n  = 100
r3 = (sample(1:10,3))
W1 = gmodel.preset(n,id=r3[1])
library(graphon)
## Generate 3 random graphons of nodal size 100.
n  = 100
r3 = (sample(1:10,3))
W1 = gmodel.preset(n,id=r3[1])
W2 = gmodel.preset(n,id=r3[2])
W3 = gmodel.preset(n,id=r3[3])
## Generate corresponding observations
A1 = gmodel.P(W1)
dim(A1)
## Generate 3 random graphons of nodal size 100.
n  = 100
r3 = (sample(1:10,3))
W1 = gmodel.preset(n,id=r3[1])
W2 = gmodel.preset(n,id=r3[2])
W3 = gmodel.preset(n,id=r3[3])
## Generate corresponding observations and plot them
A1 = gmodel.P(W1)
A2 = gmodel.P(W2)
A3 = gmodel.P(W3)
par(mfrow=c(1,3))
image(A1); image(A2); image(A3);
\dontshow{
for (i in 1:10){
W = gmodel.preset(100,id=i)
}
}
## Generate 3 random graphons of nodal size 100.
n  = 100
r3 = (sample(1:10,3))
W1 = gmodel.preset(n,id=r3[1])
W2 = gmodel.preset(n,id=r3[2])
W3 = gmodel.preset(n,id=r3[3])
## Generate corresponding observations and plot them
A1 = gmodel.P(W1)
A2 = gmodel.P(W2)
A3 = gmodel.P(W3)
par(mfrow=c(1,3))
image(A1); image(A2); image(A3);
library(graphon)
library(graphon)
install.packages("rmarkdown")
pwd
cwd
?devtools
require(devtools)
devtools::use_vignette("graphon")
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
?est.completion
library(graphon)
?est.completion
require(ROptSpace)
library(graphon)
?est.completion
library(graphon)
?est.completion
library(graphon)
?est.completion
library(graphon)
?est.completion
?OptSpace
library(ROptSpace)
?OptSpace
??OptSpace
install.packages("ROptSpace")
install.packages("ROptSpace")
library(ROptSpace)
?OptSpace
x = matrix(c(0,1,2,3),nrow=2)
2*(x-0.5)
x
?est.completion
library(graphon)
?est.completion
?OptSpace
library(graphon)
?OptSpace
?est.completion
library(graphon)
?est.completion
W = gmodel.preset(3,id=6)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 17 observations from a given probability matrix
A = gmodel.P(P,rep=17)
res = est.completion(A)
res = est.completion(A,tol=1e-7)
dim(A)
dim(A[[1]])
library(graphon)
res = est.completion(A,rank=2,tol=1e-7)
dim(res)
res
image(rank)
library(graphon)
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
?tryCatch
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
try(log(2))
try(log("a"))
try(est.completion(A,tol=1e-7))
print(try(log("a"), TRUE))
x <- stats::rnorm(50)
doit <- function(x)
{
x <- sample(x, replace = TRUE)
if(length(unique(x)) > 30) mean(x)
else stop("too few unique points")
}
res <- lapply(1:100, function(i) try(doit(x), TRUE))
res
for(i in 1:100) res[[i]] <- try(doit(x), TRUE)
## End(Not run)
unlist(res[sapply(res, function(x) !inherits(x, "try-error"))])
library(graphon)
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
?OptSpace
library(graphon)
res = est.completion(A,tol=1e-7)
?options
?stopifnot
tryCatch({1<-1})
tryCatch(1=1)
tryCatch({1=1})
tryCatch({1=1},error=message("ERROR"))
library(graphon)
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
library(graphon)
library(graphon)
res = est.completion(A,tol=1e-7)
res
tlogical <- tryCatch({
tlogical = (1<-1)
}, warning = function(war){
print(paste("* Warning Message : ",war))
tlogical = "warningFALSE"
}, error = function(war){
print(paste("* Error Message : ",war))
tlogical = "errorFALSE"
}
)
tlogical
library(graphon)
library(graphon)
res = est.completion(A,tol=1e-7)
res = est.completion(A,tol=1e-7,adjust=FALSE)
library(graphon)
res = est.completion(A,tol=1e-7,adjust=FALSE)
library(graphon)
res = est.completion(A,tol=1e-7,adjust=FALSE)
res
library(graphon)
res = est.completion(A,tol=1e-7,adjust=FALSE)
res = est.completion(A,tol=1e-7,adjust=TRUE)
library(graphon)
res = est.completion(A,tol=1e-7,adjust=TRUE)
ers
res
res = est.completion(A,tol=1e-7,adjust=FALSE)
res = est.completion(A,tol=1e-7)
library(graphon)
res = est.completion(A,tol=1e-7)
rank=NA
tolerance=1e-3
maxiter=20
progress=FALSE
adjust=TRUE
if (is.vector(A)&&is.list(A)){
if (!is.binAdjvec(A,sym=FALSE)){
stop("* est.completion : input matrix or vector A is invalid.")
}
matA = array(0,c(nrow(A[[1]]),ncol(A[[2]])))
for (i in 1:length(A)){
matA = matA + A[[i]]
}
matA = matA/length(A)
} else {
if (!is.binAdj(A,sym=FALSE)){
stop("* est.completion : input matrix A is invalid.")
}
matA = A
}
## 2. Preprocessing : We consider zeroing out
matA[(matA==0)] = NA
OSinput = 2*(matA-0.5)
library(graphon)
res = est.completion(A,tol=1e-7)
res
image(res)
res = est.completion(A,tol=1e-7,adjust=FALSE)
library(graphon)
res = est.completion(A,tol=1e-7,adjust=FALSE)
res = est.completion(A,rank=2,tol=1e-7,adjust=FALSE)
res = est.completion(A,rank=2,tol=1e-7,adjust=TRUE)
image(res)
res = est.completion(A,rank=2,tol=1e-7,adjust=FALSE)
image(res)
res = est.completion(A,rank=10,tol=1e-7,adjust=FALSE)
image(res)
library(graphon)
res = est.completion(A,tol=1e-7,adjust=FALSE)
res = est.completion(A,tol=1e-7,adjust=TRUE)
library(graphon)
## generate a graphon of type No.1 with 3 clusters
W = gmodel.preset(3,id=1)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 5 observations from a given probability matrix
A = gmodel.P(P,rep=5,symmetric.out=TRUE)
res = est.completion(A)
res
install.packages("ROptSpace")
install.packages("ROptSpace")
res = est.completion(A)
library(graphon)
res = est.completion(A)
image(A)
image(res)
library(graphon)
remove.packages("Lahman", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
remove.packages("ROptSpace", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("ROptSpace")
install.packages("ROptSpace")
W = gmodel.preset(3,id=5)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r2 = est.completion(A,rank=2)       # use rank 2 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
library(graphon)
## generate a graphon of type No.5 with 3 clusters
W = gmodel.preset(3,id=5)
## create a probability matrix for 100 nodes
graphW = gmodel.block(W,n=100)
P = graphW$P
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r2 = est.completion(A,rank=2)       # use rank 2 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
res_r2 = est.completion(A,rank=2)       # use rank 2 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r1 = est.completion(A,rank=1)       # use rank 1 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
@references Keshavan, R.H., Montanari, A., and Oh, S. (2009) \emph{Matrix Completion
## draw 10 observations from a given probability matrix
A = gmodel.P(P,rep=10)
## apply the method
res_r1 = est.completion(A,rank=1)       # use rank 1 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
res_r3 = est.completion(A,rank=3)       # use rank 1 approximation
res_r5 = est.completion(A,rank=5)       # use rank 5 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
x11()
mfrow(par=c(1,3))
image(res_r3); title("rank 3")
image(res_r5); title("rank 5")
image(res_rN); title("guessed rank")
x11()
par(mfrow=c(1,3))
image(res_r3); title("rank 3")
image(res_r5); title("rank 5")
image(res_rN); title("guessed rank")
res_r3 = est.completion(A,rank=3)       # use rank-3 approximation
res_r9 = est.completion(A,rank=9)       # use rank-9 approximation
res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly
## visualize
x11()
par(mfrow=c(1,3))
image(res_r3); title("rank 3")
image(res_r5); title("rank 5")
image(res_rN); title("guessed rank")
library(graphon)
?est.completion
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
remove.packages("ROptSpace", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("ROptSpace")
install.packages("ROptSpace")
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
help(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
help(gmodel.ER)
W = matrix(c(0.9,0.2,0.2,0.7),nr=2)
n = 200
## generate 2 observations without self-loops.
out <- gmodel.block(W,n,rep=2,noloop=TRUE)
## Visualize generated graphs
par(mfrow=c(1,2))
image(out$G[[1]]); title("Observation 1")
image(out$G[[2]]); title("Observation 2")
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
library(graphon)
