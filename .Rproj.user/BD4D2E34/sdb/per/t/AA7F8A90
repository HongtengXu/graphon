{
    "collab_server" : "",
    "contents" : "#' Estimate graphons based on matrix completion scheme\n#'\n#' \\code{est.completion} adopts a matrix completion scheme,\n#' which is common in missing data or matrix reconstruction studies.\n#' When given a multiple of, or a single observation, we consider\n#' non-existent edges as missing entries and apply the completion scheme.\n#' See \\code{\\link[ROptSpace]{OptSpace}} for a more detailed introduction.\n#'\n#' @examples\n#' ## generate a graphon of type No.5 with 3 clusters\n#' W = gmodel.preset(3,id=5)\n#'\n#' ## create a probability matrix for 100 nodes\n#' graphW = gmodel.block(W,n=100)\n#' P = graphW$P\n#'\n#' ## draw 10 observations from a given probability matrix\n#' A = gmodel.P(P,rep=10)\n#'\n#' ## apply the method\n#' res_r3 = est.completion(A,rank=3)       # use rank-3 approximation\n#' res_r9 = est.completion(A,rank=9)       # use rank-9 approximation\n#' res_rN = est.completion(A,adjust=FALSE) # stop the code if guess works poorly\n#'\n#' ## visualize\n#' par(mfrow=c(1,3))\n#' image(res_r3); title(\"rank 3\")\n#' image(res_r9); title(\"rank 9\")\n#' image(res_rN); title(\"guessed rank\")\n#'\n#' @references Keshavan, R.H., Montanari, A., and Oh, S. (2009) \\emph{Matrix Completion\n#' from a Few Entries}. Arxiv:0901.3150.\n#'\n#' @param A either \\describe{\n#' \\item{Case 1.}{an \\code{(n-by-n)} binary adjacency matrix, or}\n#' \\item{Case 2.}{a vector containing multiple of \\code{(n-by-n)} binary adjacency matrices.}\n#' }\n#' @param rank an estimated rank condition for the matrix; \\code{NA} for automatic guessing\n#' of a rank, or a positive integer for a user-supplied rank assumption.\n#' @param tolerance a tolerance level for singular value thresholding from OptSpace method.\n#' @param maxiter the number of maximum iterations for OptSpace method.\n#' @param progress a logical value; \\code{FALSE} for not showing intermediate flags during\n#' the process, \\code{TRUE} otherwise.\n#' @param adjust a logical value; \\code{TRUE} to ignore a guessed rank and set it as 2 upon\n#' numerical errors, \\code{FALSE} to stop the code.\n#'\n#' @return an \\code{(n-by-n)} corresponding probability matrix.\n#'\n#' @export\nest.completion <- function(A,rank=NA,tolerance=1e-3,maxiter=20,progress=FALSE,adjust=TRUE){\n  ## 1. Preprocessing : Directed Allowed\n  if (is.vector(A)&&is.list(A)){\n    if (!is.binAdjvec(A,sym=FALSE)){\n      stop(\"* est.completion : input matrix or vector A is invalid.\")\n    }\n    matA = array(0,c(nrow(A[[1]]),ncol(A[[2]])))\n    for (i in 1:length(A)){\n      matA = matA + A[[i]]\n    }\n    matA = matA/length(A)\n  } else {\n    if (!is.binAdj(A,sym=FALSE)){\n      stop(\"* est.completion : input matrix A is invalid.\")\n    }\n    matA = A\n  }\n\n  ## 2. Preprocessing : We consider zeroing out\n  matA[(matA==0)] = NA\n  OSinput = 2*(matA-0.5)\n\n  ## 3. Run OptSpace\n  optout = tryCatch({\n    optout = OptSpace(OSinput,ropt=rank,tol=tolerance,niter=maxiter,showprogress=FALSE)\n  }, warning = function(war){\n    print(\"* Warning from OptSpace\")\n    print(paste(\"* Warning from OptSpace : \",war))\n    if (adjust){\n      print(\"* flag 'adjust' as TRUE : force the rank to be 2.\")\n      optout = OptSpace(OSinput,ropt=2,tol=tolerance,niter=maxiter,showprogress=progress)\n    } else {\n      print(\"* est.completion : stop for the message above.\")\n      stop()\n    }\n  }, error = function(war){\n    print(\"* Error from OptSpace\")\n    print(paste(\"*\",war))\n    if (adjust){\n      print(\"* flag 'adjust' as TRUE : force the rank to be 2.\")\n      optout = OptSpace(OSinput,ropt=2,tol=tolerance,niter=maxiter,showprogress=progress)\n    } else {\n      print(\"* est.completion : stop for the message above.\")\n      stop()\n    }\n  }\n  )\n\n  ## 4. get results\n  X = optout$X\n  S = optout$S\n  Y = optout$Y\n\n  output = ((X%*%S%*%t(Y))+1)/2\n  output[(output>1)]=1\n  output[(output<0)]=0\n  return(output)\n}\n",
    "created" : 1504642520190.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3600253055",
    "id" : "AA7F8A90",
    "lastKnownWriteTime" : 1504648944,
    "last_content_update" : 1504648944644,
    "path" : "~/Desktop/ver_0.1 .1/graphon/R/est.completion.R",
    "project_path" : "R/est.completion.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}