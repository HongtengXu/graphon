?rbin
?bnorm
A = cbind(c(0,1,1,0),c(1,0,0,1),c(1,0,0,0),c(0,1,0,0))
A
eta=0.01
is.Adj <- function(A){
# 1. size
cond1 = ((is.matrix(A))&&(nrow(A)==ncol(A)))
# 2. symmetric : bounded
cond2 = (sum((A-t(A))^2)<1e-10)
# 3. no negative values
cond3 = (all((A>=0)))
# 4. diagonals are zeros
cond4 = (all(diag(A)==0))
if (cond1&&cond2&&cond3&&cond4){
return(TRUE)
} else {
return(FALSE)
}
}
## Binary {0,1} adjacency
is.binAdj <- function(A){
# 1. size
cond1 = ((is.matrix(A))&&(nrow(A)==ncol(A)))
# 2. symmetric : bounded
cond2 = (sum((A-t(A))^2)<1e-10)
# 3. no negative values
cond3 = (all((A>=0)))
# 4. diagonals are zeros
cond4 = (all(diag(A)==0))
# 5. all binaries
cond5 = all((A==1)||(A==0))
if (cond1&&cond2&&cond3&&cond4&&cond5){
return(TRUE)
} else {
return(FALSE)
}
}
if (!is.binAdj(A)){
stop("* est.usvt : input A is not a proper adjacency matrix.")
}
# 2. eta
if ((length(eta)>1)||(!is.numeric(eta))||(eta<=0)||(eta>=1)){
stop("* est.usvt : a parameter eta should be in (0,1).")
}
## Main Decomposition
# 2-1. parameter
thr = (2+eta)*sqrt(nrow(A))
eA = svd(A);
thr
eA$d
A = cbind(c(1,1,1,0),c(1,1,0,1),c(1,0,1,0),c(0,1,0,1))
thr = (2+eta)*sqrt(nrow(A))
eA = svd(A);
thr
eA$d
is.binAdj <- function(A,sym=TRUE){
# 1. size
cond1 = ((is.matrix(A))&&(nrow(A)==ncol(A)))
# 2. symmetric : bounded
if (sym){
cond2 = (sum((A-t(A))^2)<1e-10)
} else {
cond2 = TRUE
}
# 3. no negative values
cond3 = (all((A>=0)))
# 4. diagonals are zeros
cond4 = (all(diag(A)==0))
# 5. all binaries
cond5 = all((A==1)||(A==0))
if (cond1&&cond2&&cond3&&cond4&&cond5){
return(TRUE)
} else {
return(FALSE)
}
}
x
A = vector("list")
A[[1]] = matrix(rnorm(25),nr=5)
A[[2]] = matrix(rnorm(25),nr=5)
x = TRUE
y = TRUE
z = FALSE
x*y
(x*y)
(x*z)
xy = (x&&y)
xy
xz = (x&&z)
xz
